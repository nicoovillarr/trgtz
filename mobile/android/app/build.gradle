plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion', '28').toInteger()
def flutterTargetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion', '34').toInteger()

android {
    namespace "com.marppa.trgtz"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.marppa.trgtz"
        
        minSdkVersion flutterMinSdkVersion
        targetSdkVersion flutterTargetSdkVersion
    }

    signingConfigs {
        live {
            def liveJks = new Properties()
            def liveJksFile = rootProject.file('key-live.properties')
            if (liveJksFile.exists()) {
                liveJks.load(new FileInputStream(liveJksFile))
            }

            keyAlias liveJks['keyAlias']
            keyPassword liveJks['keyPassword']
            storeFile liveJks['storeFile'] ? file(liveJks['storeFile']) : null
            storePassword liveJks['storePassword']
        }

        staging {
            def stagingJks = new Properties()
            def stagingJksFile = rootProject.file('key-staging.properties')
            if (stagingJksFile.exists()) {
                stagingJks.load(new FileInputStream(stagingJksFile))
            }

            keyAlias stagingJks['keyAlias']
            keyPassword stagingJks['keyPassword']
            storeFile stagingJks['storeFile'] ? file(stagingJks['storeFile']) : null
            storePassword stagingJks['storePassword']
        }
        
        development {
            def devJks = new Properties()
            def devJksFile = rootProject.file('key-development.properties')
            if (devJksFile.exists()) {
                devJks.load(new FileInputStream(devJksFile))
            }

            keyAlias devJks['keyAlias']
            keyPassword devJks['keyPassword']
            storeFile devJks['storeFile'] ? file(devJks['storeFile']) : null
            storePassword devJks['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
        }
    }

    flavorDimensions "default"

    productFlavors {
        live {
            def admobProperties = new Properties()
            rootProject.file("admob-live.properties").withInputStream { admobProperties.load(it) }
            manifestPlaceholders = [adMobApplicationId: admobProperties["admob_application_id"]]

            dimension "default"
            resValue "string", "app_name", "Trgtz"
            signingConfig signingConfigs.live
        
            def versionPropsFile = rootProject.file('version-live.properties')
            def versionProps = new Properties()
            if (versionPropsFile.exists()) {
                versionProps.load(new FileInputStream(versionPropsFile))
            }
            
            versionCode versionProps['VERSION_CODE'].toInteger()
            versionName versionProps['VERSION_NAME']
        }

        staging {
            def admobProperties = new Properties()
            rootProject.file("admob-staging.properties").withInputStream { admobProperties.load(it) }
            manifestPlaceholders = [adMobApplicationId: admobProperties["admob_application_id"]]

            dimension "default"
            resValue "string", "app_name", "Trgtz UAT"
            applicationIdSuffix ".stg"
            manifestPlaceholders = [adMobApplicationId: admobProperties["admob_application_id"]]
            signingConfig signingConfigs.staging
        
            def versionPropsFile = rootProject.file('version-staging.properties')
            def versionProps = new Properties()
            if (versionPropsFile.exists()) {
                versionProps.load(new FileInputStream(versionPropsFile))
            }
            
            versionCode versionProps['VERSION_CODE'].toInteger()
            versionName versionProps['VERSION_NAME']
        }

        development {
            def admobProperties = new Properties()
            rootProject.file("admob-development.properties").withInputStream { admobProperties.load(it) }
            manifestPlaceholders = [adMobApplicationId: admobProperties["admob_application_id"]]
        
            versionCode 1
            versionName "dev"

            dimension "default"
            resValue "string", "app_name", "Trgtz dev"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [adMobApplicationId: admobProperties["admob_application_id"]]
            signingConfig signingConfigs.development
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.google.android.gms:play-services-auth:20.4.1'
}