name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - live
          - staging
      pre-release:
        description: "Mark as pre-release"
        required: true
        default: "true"

jobs:
  deploy:
    runs-on: self-hosted

    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/live' }}

    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'staging' || github.ref == 'refs/heads/live' && 'live' }}

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get last tag version
        id: get_version
        run: |
          git fetch --tags
          last_tag=$(git describe --tags $(git rev-list --tags --max-count=1))\
          clean_version=$(echo $last_tag | sed -E 's/^v//; s/-.*//')
          jq --arg version "$clean_version" '.version = $version' package.json > package.tmp.json && mv package.tmp.json package.json
          echo "Cleaned version: $clean_version"
        shell: bash

      - name: Run standard-version
        run: |
          if [[ "${{ github.event.inputs.pre-release }}" == "true" && "${{ github.event.inputs.environment }}" == "staging" ]]; then
            param="-p stg"
          elif [[ "${{ github.event.inputs.pre-release }}" == "true" && "${{ github.event.inputs.environment }}" == "live" ]]; then
            param="-p live"
          elif [[ "${{ github.event.inputs.pre-release }}" == "true" ]]; then
            param="-p"
          else
            param=""
          fi
          npx standard-version $param

          git pull origin

      - name: Set Android version
        run: |
          VERSION_FILE="./mobile/android/version.properties"

          if [ -f "$VERSION_FILE" ]; then
              VERSION_CODE=$(awk -F= '/VERSION_CODE/ {print $2}' "$VERSION_FILE")
          else
              VERSION_CODE=0
          fi

          VERSION_NAME=$(node -p "require('./package.json').version")
          VERSION_CODE=$((VERSION_CODE + 1))

          echo "VERSION_NAME=$VERSION_NAME" > $VERSION_FILE
          echo "VERSION_CODE=$VERSION_CODE" >> $VERSION_FILE

          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
        shell: bash

      - name: Build Android bundle
        run: |
          cd mobile

          touch .env.development
          touch .env.staging
          touch .env.live

          echo "ENDPOINT=$ENDPOINT" > .env.${{ github.event.inputs.environment }}
          echo "WS_ENDPOINT=$WS_ENDPOINT" >> .env.${{ github.event.inputs.environment }}]

          flutter clean
          flutter pub get
          flutter build appbundle --flavor ${{ github.event.inputs.environment }} -t lib/main_${{ github.event.inputs.environment }}.dart
        shell: bash
        env:
          ENDPOINT: ${{ vars.ENDPOINT }}
          WS_ENDPOINT: ${{ vars.WS_ENDPOINT }}

      - name: Push changes
        run: |
          TAG_NAME=v$(node -p "require('./package.json').version")
          COMMIT_MESSAGE=$(git log --pretty=format:%s -n 1)

          git tag -d $TAG_NAME
          git add .
          git commit --amend -m "$COMMIT_MESSAGE"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          git push --follow-tags origin main
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
